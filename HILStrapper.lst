Y:\Development\8051\Bootstrapper\HILStrapper.xsf 
Y:\Development\8051\Bootstrapper\HILStrapper.asm 
       1       1   00000                  ; Matt Rienzo, HILStrapper.inc 8/25/2018
       2       2   00000                  
../include/asm/Registers.inc 
       4       1   00000                  ; Matt Rienzo, Registers.inc 8/25/2018
       5       2   00000                  
       6       3   00000                  ;-- Alias/enumeration of registers and banks
       7       4   00000                  a0	equ	0
       8       5   00000                  a1	equ	1
       9       6   00000                  a2	equ	2
      10       7   00000                  a3	equ	3
      11       8   00000                  a4	equ	4
      12       9   00000                  a5	equ	5
      13      10   00000                  a6	equ	6
      14      11   00000                  a7	equ	7
      15      12   00000                  b0	equ	8
      16      13   00000                  b1	equ	9
      17      14   00000                  b2	equ	10
      18      15   00000                  b3	equ	11
      19      16   00000                  b4	equ	12
      20      17   00000                  b5	equ	13
      21      18   00000                  b6	equ	14
      22      19   00000                  b7	equ	15
      23      20   00000                  c0	equ	16
      24      21   00000                  c1	equ	17
      25      22   00000                  c2	equ	18
      26      23   00000                  c3	equ	19
      27      24   00000                  c4	equ	20
      28      25   00000                  c5	equ	21
      29      26   00000                  c6	equ	22
      30      27   00000                  c7	equ	23
      31      28   00000                  
      32      29   00000                  ;-- SFRs
      33      30   00000                  sp  equ 0x81
      34      31   00000                  acc equ 0xe0
      35      32   00000                  bcc equ 0xf0
      36      33   00000                  psw equ 0xd0
../include/asm/ShortStack.inc 
      38       1   00000                  ; Matt Rienzo, ShortStack.inc 8/25/2018
      39       2   00000                  
      40       3   00000                  ; The following registers I am reserving for short stack operations
      41       4   00000                  s0	equ	0x18
      42       5   00000                  s1	equ	0x19
      43       6   00000                  s2	equ	0x1a
      44       7   00000                  s3	equ 0x1b
      45       8   00000                  s4	equ	0x1c
      46       9   00000                  s5	equ	0x1d
      47      10   00000                  s6	equ	0x1e
      48      11   00000                  s7	equ	0x1f
      49      12   00000                  
      50      13   00000                  
      51      14   00000                  ; SHORT STACK -- see the Short Stack section after the END instruction for an explanation
      52      15   00000                  ;  of what this is
      53      16   00000                  ; Short stack address "register" and short stack size "register"
      54      17   00000                  ss	equ	0x20	; short stack 0 address
      55      18   00000                  ssz	equ 0x21	; short stack size (index)
      56      19   00000                  msz	equ	0x22	; short stack max size (to avoid overflow, but with stack wrapping/overwrites)
ADC.inc 
      58       1   00000                  ; ------------- READS51 generated header --------------
      59       2   00000                  ; module  : Y:\Development\8051\Bootstrapper\Bootstrapper\ADC.inc
      60       3   00000                  ; created : 11:09:44, Monday, August 27, 2018
      61       4   00000                  ; -----------------------------------------------------
      62       5   00000                  
      63       6   00000                  ; Matt Rienzo, ADC.inc 8/27/2018
      64       7   00000                  
      65       8   00000                  ; Direct memory addressing
      66       9   00000                  adcon       equ 0xf3
      67      10   00000                  adcf        equ 0xf6
      68      11   00000                  adclk       equ 0xf2
      69      12   00000                  addh        equ 0xf5
      70      13   00000                  addl        equ 0xf4
InterruptController.inc 
      72       1   00000                  ; ------------- READS51 generated header --------------
      73       2   00000                  ; module  : Y:\Development\8051\Bootstrapper\Bootstrapper\InterruptController.inc
      74       3   00000                  ; created : 11:26:26, Monday, August 27, 2018
      75       4   00000                  ; -----------------------------------------------------
      76       5   00000                  
      77       6   00000                  ; Matt Rienzo, InterruptController.inc
      78       7   00000                  
      79       8   00000                  ien0    equ 0xa8
      80       9   00000                  ien1    equ 0xe8
      81      10   00000                  ipl0    equ 0xb8
      82      11   00000                  iph0    equ 0xb7
      83      12   00000                  ipl1    equ 0xf8
      84      13   00000                  iph1    equ 0xf7
      85      14   00000                  
Y:\Development\8051\Bootstrapper\HILStrapper.asm 
      86       7   00000                  
      87      15   00000                  
      88      16   00000                  ;#define OPTIMIZE
      89      18   00000                  
      90      19   00000                  HIL		segment	code
      91      20   00000                  
      92      21   00000                  public	__HIL_init
      93      23   00000                  public	__HIL_C_test
      94      25   00000                  rseg	HIL
      95      26   00000                      extern  code    __sspop
      96      27   00000                      extern  code    __sspush
      97      28   00000                      ; __HIL_init : initializes hardware components, and defines functions/callbacks for hardware
      98      29   00000                      ;   manipulate by the HAL.
      99      30   00000                      ; args: none
     100      31   00000                      ; rets: SS(#retval) -- Immediate byte off short stack to tell __entry whether or not we failed.
     101      32   00000                  	__HIL_init:
     102      33   00000                          ; 1) Check battery voltage
     103      34   00000 111B                     acall   __HIL_enable_ADC
                         001B010040      
     104      35   00002 53A87F                   lowEA                               ; Disable interrupts for while we check devices on ADC
     105      36   00005 751800                   sspushl(0x00)                      ; Channel byte for ADC/Battery voltage
     106      37   00008 C018                     acall   __HIL_select_ADCCh
     107      38   0000A 120000                   acall   __HIL_enable_ADCCollect     ; Enable ADC collection on the channel for the battery
                         0000000840      
     108      39   0000D 1131                     acall   __HIL_check_batt_voltage    ; Check battery voltage
                         0031010040      
     109      40   0000F 113B                     sspop(acc)
                         003B010040      
     110      41   00011 113F                     cjne    a,          #0x00,  HIL_init_fail
                         003F010040      
     111      42   00013 120000           
                         0000010840      
     112      43   00016 D0E0                     ; 2) Turn on accelerometer
     113      44   00018 B4004B           
     114      45   0001B                  
     115      46   0001B                  
     116      47   0001B                      ; __HIL_enable_ADC : Turns on and resets ADC
     117      48   0001B                      ; args: none
     118      49   0001B                      ; rets: none
     119      50   0001B                      __HIL_enable_ADC:
     120      51   0001B                          ; 1) Turn on ADC.
     121      52   0001B 75F600                   mov     adcf,       #0x00   ; reset
     122      53   0001E 75F601                   mov     adcf,       #0x01
     123      54   00021 75F320                   mov     adcon,      #0x20
     124      55   00024 75F200                   mov     adclk,      #0x00
     125      57   00027 85F617                   mov     c7,         adcf
     126      58   0002A 85F316                   mov     c6,         adcon
     127      59   0002D 85F215                   mov     c5,         adclk
     128      61   00030 22                       ret
     129      62   00031                  
     130      63   00031                      ; __HIL_select_ADCCh : Selects the active ADC channel
     131      64   00031                      ; args: SS(#channel)    -- byte on short stack
     132      65   00031                      ; rets: none
     133      66   00031                      __HIL_select_ADCCh:
     134      67   00031                          ; battery voltage/division will be routed to ADC channel 0
     135      68   00031 53F3F8                   anl     adcon,      #0xf8   ; Reset ADC channel selection
     136      69   00034 43F300                   orl     adcon,      #0x00   ; Select channel 0
     137      70   00037 43F320                   orl     adcon,      #0x20   ; Select standard mode
     138      71   0003A 22                       ret
     139      72   0003B                  
     140      73   0003B                      ; __HIL_enable_ADCCollect : Enables ADC collection on selected channel
     141      74   0003B                      ; args: none
     142      75   0003B                      ; rets: none
     143      76   0003B                      __HIL_enable_ADCCollect:
     144      77   0003B                          ; Start the ADC collection
     145      78   0003B 43F308                   orl     adcon,      #0x08   ; Enable ADC collectors
     146      79   0003E 22                       ret
     147      80   0003F                  
     148      81   0003F                      ; __HIL_check_batt_voltage : Checks the battery voltage
     149      82   0003F                      ; args: none
     150      83   0003F                      ; rets: SS(#retval)     -- byte 0x00 for success, 0xff for fail
     151      84   0003F                      __HIL_check_batt_voltage:
     152      85   0003F C0E0                     push    acc
     153      86   00041                      hsWdbADCON:
     154      87   00041 E5F3                     mov     a,          adcon
     155      88   00043 5510                     anl     a,          0x10
     156      89   00045 B510F9                   cjne    a,          0x10,   hsWdbADCON
     157      90   00048                  
     158      91   00048                          ; Voltage check
     159      92   00048                  #define     MINIMUM_BATT_VOLTAGEh   0x0f    ; will change
     160      93   00048                  #define     MINIMUM_BATT_VOLTAGEl   0xFF    ; will change
     161      94   00048 C0F0                     push    bcc
     162      96   0004A 74FF                     mov     a,          #0xff
     163      97   0004C 7400                     mov     a,          #0x00
     164      98   0004E 74FF                     mov     a,          #0xff
     165     117   00050                  #endif
     166     118   00050 D0F0                     pop     bcc
     167     119   00052 D0E0                     pop     acc
     168     120   00054 751800                   sspushl(0x00)
     169     121   00057 C018                     ret
     170     122   00059 120000           
                         0000000840      
     171     123   0005C 22                   ; __HIL_disable_batterylo : Turns on BATT_LOW led, and red square.
     172     124   0005D                      ; args: none
     173     125   0005D                      ; rets: SS(#0xff)
     174     126   0005D                      __HIL_disable_batterylo:
     175     127   0005D                          ; Turn on battery low light
     176     128   0005D                          ; Turn on red square
     177     129   0005D 7518FF                   sspushl(0xff)
     178     130   00060 C018                     ret
     179     131   00062 120000           
                         0000000840      
     180     132   00065 22               
     181     133   00066                  
     182     134   00066                          ; 3) Turn on accelerometer
     183     135   00066                          ; 4) Switch interrupts?
     184     136   00066                          ; 5) Return success
     185     137   00066                          ; Handler for turning on LEDs
     186     138   00066                          ; Handler for LED array
     187     139   00066                          ; Handler for power touch button
     188     140   00066                          ; Handler for battery power measuring
     189     141   00066                          ; Handler for accelerometer
     190     142   00066                          ; Handler for vibration motor
     191     143   00066                  
     192     144   00066                  	HIL_init_fail:
     193     145   00066 7518FF                   sspushl(0xff)
     194     146   00069 C018                     ret
     195     147   0006B 120000           
                         0000000840      
     196     148   0006E 22               #ifdef      DEBUG
     197     149   0006F                      __HIL_C_test:
     198     150   0006F 7518E4                   sspushl(0xe4)
     199     151   00072 C018             		; Order of operation:
     200     152   00074 120000           		ret
                         0000000840      
     201     154   00077 22               
     202     155   00078                  
     203     156   00078                  end


*** Symbols ***
name                    hex      dec          type     segment
--------------------------------------------------------------
ss                   0x0020       32        number     absolute
c0                   0x0010       16        number     absolute
s0                   0x0018       24        number     absolute
c1                   0x0011       17        number     absolute
b0                   0x0008        8        number     absolute
iph0                 0x00B7      183        number     absolute
ien0                 0x00A8      168        number     absolute
s1                   0x0019       25        number     absolute
c2                   0x0012       18        number     absolute
b1                   0x0009        9        number     absolute
a0                   0x0000        0        number     absolute
HIL_init_fail        0x0066      102          code     HIL
__HIL_init           0x0000        0          code     HIL
iph1                 0x00F7      247        number     absolute
ien1                 0x00E8      232        number     absolute
ssz                  0x0021       33        number     absolute
s2                   0x001A       26        number     absolute
c3                   0x0013       19        number     absolute
b2                   0x000A       10        number     absolute
a1                   0x0001        1        number     absolute
__HIL_check_batt_voltage 0x003F       63          code     HIL
s3                   0x001B       27        number     absolute
c4                   0x0014       20        number     absolute
b3                   0x000B       11        number     absolute
a2                   0x0002        2        number     absolute
s4                   0x001C       28        number     absolute
c5                   0x0015       21        number     absolute
b4                   0x000C       12        number     absolute
a3                   0x0003        3        number     absolute
adcf                 0x00F6      246        number     absolute
s5                   0x001D       29        number     absolute
c6                   0x0016       22        number     absolute
b5                   0x000D       13        number     absolute
a4                   0x0004        4        number     absolute
addh                 0x00F5      245        number     absolute
s6                   0x001E       30        number     absolute
c7                   0x0017       23        number     absolute
b6                   0x000E       14        number     absolute
a5                   0x0005        5        number     absolute
s7                   0x001F       31        number     absolute
b7                   0x000F       15        number     absolute
a6                   0x0006        6        number     absolute
a7                   0x0007        7        number     absolute
__HIL_C_test         0x006F      111          code     HIL
hsWdbADCON           0x0041       65          code     HIL
adclk                0x00F2      242        number     absolute
adcon                0x00F3      243        number     absolute
__HIL_disable_batterylo 0x005D       93          code     HIL
addl                 0x00F4      244        number     absolute
acc                  0x00E0      224        number     absolute
bcc                  0x00F0      240        number     absolute
msz                  0x0022       34        number     absolute
psw                  0x00D0      208        number     absolute
sp                   0x0081      129        number     absolute
__HIL_enable_ADCCollect 0x003B       59          code     HIL
__HIL_select_ADCCh   0x0031       49          code     HIL
ipl0                 0x00B8      184        number     absolute
__HIL_enable_ADC     0x001B       27          code     HIL
ipl1                 0x00F8      248        number     absolute


*** Externals (Imports) ***
name                    hex      dec          type
--------------------------------------------------
__sspush             0x0000        0          code 
__sspop              0x0000        0          code 


*** Publics (Exports) ***
name                    hex      dec          type
--------------------------------------------------
__HIL_init           0x0000        0          code 
__HIL_C_test         0x006F      111          code 
