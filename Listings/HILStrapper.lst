A51 MACRO ASSEMBLER  HILSTRAPPER                                                          10/10/2018 14:44:02 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\HILStrapper.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE HILStrapper.asm SET(SMALL) DEBUG PRINT(.\Listings\HILStrapper.lst) OBJE
                      CT(.\Objects\HILStrapper.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; Matt Rienzo, HILStrapper.inc 8/25/2018
                       2     
                       3     ;#include "./include/asm/Registers.inc"
                +1     4     ; Matt Rienzo, Registers.inc 8/25/2018
                +1     5     
                +1     6     ;-- Alias/enumeration of registers and banks
  0000          +1     7     a0      equ     0
  0001          +1     8     a1      equ     1
  0002          +1     9     a2      equ     2
  0003          +1    10     a3      equ     3
  0004          +1    11     a4      equ     4
  0005          +1    12     a5      equ     5
  0006          +1    13     a6      equ     6
  0007          +1    14     a7      equ     7
  0008          +1    15     b0      equ     8
  0009          +1    16     b1      equ     9
  000A          +1    17     b2      equ     10
  000B          +1    18     b3      equ     11
  000C          +1    19     b4      equ     12
  000D          +1    20     b5      equ     13
  000E          +1    21     b6      equ     14
  000F          +1    22     b7      equ     15
  0010          +1    23     c0      equ     16
  0011          +1    24     c1      equ     17
  0012          +1    25     c2      equ     18
  0013          +1    26     c3      equ     19
  0014          +1    27     c4      equ     20
  0015          +1    28     c5      equ     21
  0016          +1    29     c6      equ     22
  0017          +1    30     c7      equ     23
                +1    31     
                +1    32     ;-- SFRs
                +1    33     ;sp  equ 0x81
                +1    34     ;acc equ 0xe0
  00F0          +1    35     bcc equ 0xf0
                +1    36     ;psw equ 0xd0
                      37     
                      38     ;#include "./include/asm/ShortStack.inc"
                +1    39     ; Matt Rienzo, ShortStack.inc 8/25/2018
                +1    40     
                +1    41     ; The following registers I am reserving for short stack operations
  0018          +1    42     s0      equ     0x18
  0019          +1    43     s1      equ     0x19
  001A          +1    44     s2      equ     0x1a
  001B          +1    45     s3      equ 0x1b
  001C          +1    46     s4      equ     0x1c
  001D          +1    47     s5      equ     0x1d
  001E          +1    48     s6      equ     0x1e
  001F          +1    49     s7      equ     0x1f
                +1    50     
                +1    51     
                +1    52     ; SHORT STACK -- see the Short Stack section after the END instruction for an explanation
                +1    53     ;  of what this is
                +1    54     ; Short stack address "register" and short stack size "register"
  0020          +1    55     ss      equ     0x20    ; short stack 0 address
  0021          +1    56     ssz     equ 0x21        ; short stack size (index)
  0022          +1    57     msz     equ     0x22    ; short stack max size (to avoid overflow, but with stack wrapping/
A51 MACRO ASSEMBLER  HILSTRAPPER                                                          10/10/2018 14:44:02 PAGE     2

                             overwrites)
                      58     
                      59     ;#include "./include/asm/ADC.inc"
                +1    60     ; ------------- READS51 generated header -------------- 
                +1    61     ; module  : Y:\Development\8051\Bootstrapper\Bootstrapper\ADC.inc
                +1    62     ; created : 11:09:44, Monday, August 27, 2018
                +1    63     ; ----------------------------------------------------- 
                +1    64     
                +1    65     ; Matt Rienzo, ADC.inc 8/27/2018
                +1    66     
                +1    67     ; Direct memory addressing
  00F3          +1    68     adcon       equ 0xf3
  00F6          +1    69     adcf        equ 0xf6
  00F2          +1    70     adclk       equ 0xf2
  00F5          +1    71     addh        equ 0xf5
  00F4          +1    72     addl        equ 0xf4
                      73     
                      74     ;#include "./include/asm/InterruptController.inc"
                +1    75     ; ------------- READS51 generated header -------------- 
                +1    76     ; module  : Y:\Development\8051\Bootstrapper\Bootstrapper\InterruptController.inc
                +1    77     ; created : 11:26:26, Monday, August 27, 2018
                +1    78     ; ----------------------------------------------------- 
                +1    79     
                +1    80     ; Matt Rienzo, InterruptController.inc
                +1    81     
  00A8          +1    82     ien0    equ 0xa8
  00E8          +1    83     ien1    equ 0xe8
  00B8          +1    84     ipl0    equ 0xb8
  00B7          +1    85     iph0    equ 0xb7
  00F8          +1    86     ipl1    equ 0xf8
  00F7          +1    87     iph1    equ 0xf7
                +1    88     
                +1    89     raisEA          macro
                +1    90             orl             ien0,   #0x80
                +1    91     endm
                +1    92     
                +1    93     lowEA           macro
                +1    94             anl     ien0,   #0x7f
                +1    95     endm
                      96     
                      97     ;#include "./include/asm/MacroLang.inc"
                +1    98     ; Matt Rienzo, MacroLang.inc 8/25/2018
                +1    99     sspush          macro   x
                +1   100             push    x
                +1   101             lcall   __sspush
                +1   102     endm
                +1   103     
                +1   104     sspop           macro   x
                +1   105             lcall   __sspop
                +1   106             pop             x
                +1   107     endm
                +1   108     
                +1   109     sspushl         macro   N
                +1   110             mov             s0,             N
                +1   111             push    s0
                +1   112             lcall   __sspush
                +1   113     endm
                     114     
                     115     
                     116     
                     117     ;#define DEBUG
                     118     
                     119     
                     120     HIL             segment code
                     121             
                     122     public  __HIL_init
A51 MACRO ASSEMBLER  HILSTRAPPER                                                          10/10/2018 14:44:02 PAGE     3

                     123     
                             
                             
----                 126     rseg    HIL
                     127         extrn  code    (__sspop)
                     128         extrn  code    (__sspush)
                     129         ; __HIL_init : initializes hardware components, and defines functions/callbacks for har
                             dware
                     130         ;   manipulate by the HAL.
                     131         ; args: none
                     132         ; rets: SS(#retval) -- Immediate byte off short stack to tell __entry whether or not we
                              failed.
0000                 133             __HIL_init:
                     134             ; 1) Check battery voltage
                     135     
0000 C0E0            136                     push    acc
0002 74EE            137                     mov             a,              #0xEE
0004 7400            138                     mov             a,              #0x00
0006 74EE            139                     mov             a,              #0xEE
0008 7400            140                     mov             a,              #0x00
000A 74EE            141                     mov             a,              #0xEE
000C 7400            142                     mov             a,              #0x00
000E D0E0            143                     pop             acc
                     144     
0010 1100     F      145             acall   __HIL_enable_ADC
                     146             lowEA                               ; Disable interrupts for while we check devices
                              on ADC
                     148             sspushl #0x00                      ; Channel byte for ADC/Battery voltage
001D 1100     F      152             acall   __HIL_select_ADCCh
001F 1100     F      153             acall   __HIL_enable_ADCCollect     ; Enable ADC collection on the channel for the 
                             battery
0021 1100     F      154             acall   __HIL_check_batt_voltage    ; Check battery voltage
                     155             sspop   acc
0028 B40064          158             cjne    a,          #0x00,  HIL_init_fail
                     159             
                     160             ; 2) Turn on accelerometer
                     161     
                     162     
                     163     
                     164         ; __HIL_enable_ADC : Turns on and resets ADC
                     165         ; args: none
                     166         ; rets: none
002B                 167         __HIL_enable_ADC:
                     168             ; 1) Turn on ADC.
002B 75F600          169             mov     adcf,       #0x00   ; reset
002E 75F601          170             mov     adcf,       #0x01
0031 75F320          171             mov     adcon,      #0x20
0034 75F200          172             mov     adclk,      #0x00
                     173     
                                     
                                     
                                     
                             
0037 22              178             ret
                     179     
                     180         ; __HIL_select_ADCCh : Selects the active ADC channel
                     181         ; args: SS(#channel)    -- byte on short stack
                     182         ; rets: none
0038                 183         __HIL_select_ADCCh:
                     184             ; battery voltage/division will be routed to ADC channel 0
0038 53F3F8          185             anl     adcon,      #0xf8   ; Reset ADC channel selection
003B 43F300          186             orl     adcon,      #0x00   ; Select channel 0
003E 43F320          187             orl     adcon,      #0x20   ; Select standard mode
0041 22              188             ret
                     189     
                     190         ; __HIL_enable_ADCCollect : Enables ADC collection on selected channel
A51 MACRO ASSEMBLER  HILSTRAPPER                                                          10/10/2018 14:44:02 PAGE     4

                     191         ; args: none
                     192         ; rets: none
0042                 193         __HIL_enable_ADCCollect:
                     194             ; Start the ADC collection
0042 43F308          195             orl     adcon,      #0x08   ; Enable ADC collectors
0045 22              196             ret
                     197     
                     198         ; __HIL_check_batt_voltage : Checks the battery voltage
                     199         ; args: none
                     200         ; rets: SS(#retval)     -- byte 0x00 for success, 0xff for fail
0046                 201         __HIL_check_batt_voltage:
0046 C0E0            202             push    acc
0048                 203         hsWdbADCON:
0048 E5F3            204             mov     a,          adcon
004A 5510            205             anl     a,          0x10
004C B510F9          206             cjne    a,          0x10,   hsWdbADCON
                     207     
                     208             ; Voltage check
                     209     
                     210     
004F C0F0            211             push    bcc
                     212     
                                     
                                     
                                     
                             
                     217     
                     218                     ; We don't want to have a looping simulation because there's not an ADC in 
                             the simulator
                     219             ; For #n > a, subb a, #n sets the carry flag
                     220             ; For #n < a, subb a, #n clears the carry flag
                     221             ; For #n == a, subb a, #n clears the carry flag
                     222     
                     223             ; For HIL, we only check if the battery is too low to operate and then we shut down
0051 740F            224             mov     a,          #0x0f ; will change      ; Check the upper 8 MSB
0053 B5F502          225             cjne    a,          addh,   hsWdbBATT
0056 8018            226             sjmp    __HIL_disable_batterylo                 ; addh == MINIMUM_BATT_VOLTAGEh, so
                              we're on the line
0058                 227         hsWdbBATT:
0058 C3              228             clr     c
0059 95F5            229             subb    a,          addh                        ; Try to set C
005B E5D0            230             mov     a,          psw
005D 5580            231             anl     a,          0x80                        ; Check if the carry bit is set
005F B5800E          232             cjne    a,          0x80,   __HIL_disable_batterylo
                     233             ; If we get here we're fine.
0062 C3              234             clr     c
                     235     
0063 D0F0            236             pop     bcc
0065 D0E0            237             pop     acc
                     238             sspushl #0x00
006F 22              242             ret
                     243     
                     244         ; __HIL_disable_batterylo : Turns on BATT_LOW led, and red square.
                     245         ; args: none
                     246         ; rets: SS(#0xff)
0070                 247         __HIL_disable_batterylo:
                     248     
                     249                     ; Spell out `BATTERY LO' in hex for the debugger
0070 751FBA          250                     mov             s7,                     #0xBA
0073 751E11          251                     mov             s6,                     #0x11
0076 751DE5          252                     mov             s5,                     #0xE5
0079 751C70          253                     mov             s4,                     #0x70
007C 751B00          254                     mov             s3,                     #0x00
007F 751A10          255                     mov             s2,                     #0x10
                     256     
                     257     
A51 MACRO ASSEMBLER  HILSTRAPPER                                                          10/10/2018 14:44:02 PAGE     5

                     258                     ; Move RETADDR to top of stack again
0082 D0F0            259                     pop             bcc
0084 D0E0            260                     pop             acc
                     261             ; Turn on battery low light
                     262             ; Turn on red square
                     263             sspushl #0xff
008E 22              267             ret
                     268     
                     269     
                     270             
                     271             ; 3) Turn on accelerometer
                     272             ; 4) Switch interrupts?
                     273             ; 5) Return success
                     274             ; Handler for turning on LEDs
                     275             ; Handler for LED array
                     276             ; Handler for power touch button
                     277             ; Handler for battery power measuring
                     278             ; Handler for accelerometer
                     279             ; Handler for vibration motor
                     280             
008F                 281             HIL_init_fail:
                     282     
                     283                     ; Spell out `INIT FAIL' in hex for the debugger
008F 751F14          284                     mov             s7,                     #0x14
0092 751E17          285                     mov             s6,                     #0x17
0095 751D00          286                     mov             s5,                     #0x00
0098 751CFA          287                     mov             s4,                     #0xFA
009B 751B11          288                     mov             s3,                     #0x11
009E 751A00          289                     mov             s2,                     #0x00
                     290     
                     291     
                     292             sspushl #0xff
                     296     
                     297                     ; Spell out `RETURN' in hex for the debugger
00A9 751F2E          298                     mov             s7,                     #0x2E
00AC 751E73          299                     mov             s6,                     #0x73
00AF 751D27          300                     mov             s5,                     #0x27
00B2 751CEE          301                     mov             s4,                     #0xEE
00B5 751BEE          302                     mov             s3,                     #0xEE
00B8 751AEE          303                     mov             s2,                     #0xEE
                     304     
                     305                     
00BB 22              306             ret
                     307             
                             
                             
                                     
                                             
                                             
                             
                     314     
                     315     end
A51 MACRO ASSEMBLER  HILSTRAPPER                                                          10/10/2018 14:44:02 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E                   T Y P E  V A L U E   ATTRIBUTES

A0 . . . . . . . . . . .  N NUMB   0000H   A   
A1 . . . . . . . . . . .  N NUMB   0001H   A   
A2 . . . . . . . . . . .  N NUMB   0002H   A   
A3 . . . . . . . . . . .  N NUMB   0003H   A   
A4 . . . . . . . . . . .  N NUMB   0004H   A   
A5 . . . . . . . . . . .  N NUMB   0005H   A   
A6 . . . . . . . . . . .  N NUMB   0006H   A   
A7 . . . . . . . . . . .  N NUMB   0007H   A   
ACC. . . . . . . . . . .  D ADDR   00E0H   A   
ADCF . . . . . . . . . .  N NUMB   00F6H   A   
ADCLK. . . . . . . . . .  N NUMB   00F2H   A   
ADCON. . . . . . . . . .  N NUMB   00F3H   A   
ADDH . . . . . . . . . .  N NUMB   00F5H   A   
ADDL . . . . . . . . . .  N NUMB   00F4H   A   
B0 . . . . . . . . . . .  N NUMB   0008H   A   
B1 . . . . . . . . . . .  N NUMB   0009H   A   
B2 . . . . . . . . . . .  N NUMB   000AH   A   
B3 . . . . . . . . . . .  N NUMB   000BH   A   
B4 . . . . . . . . . . .  N NUMB   000CH   A   
B5 . . . . . . . . . . .  N NUMB   000DH   A   
B6 . . . . . . . . . . .  N NUMB   000EH   A   
B7 . . . . . . . . . . .  N NUMB   000FH   A   
BCC. . . . . . . . . . .  N NUMB   00F0H   A   
C0 . . . . . . . . . . .  N NUMB   0010H   A   
C1 . . . . . . . . . . .  N NUMB   0011H   A   
C2 . . . . . . . . . . .  N NUMB   0012H   A   
C3 . . . . . . . . . . .  N NUMB   0013H   A   
C4 . . . . . . . . . . .  N NUMB   0014H   A   
C5 . . . . . . . . . . .  N NUMB   0015H   A   
C6 . . . . . . . . . . .  N NUMB   0016H   A   
C7 . . . . . . . . . . .  N NUMB   0017H   A   
HIL. . . . . . . . . . .  C SEG    00BCH       REL=UNIT
HIL_INIT_FAIL. . . . . .  C ADDR   008FH   R   SEG=HIL
HSWDBADCON . . . . . . .  C ADDR   0048H   R   SEG=HIL
HSWDBBATT. . . . . . . .  C ADDR   0058H   R   SEG=HIL
IEN0 . . . . . . . . . .  N NUMB   00A8H   A   
IEN1 . . . . . . . . . .  N NUMB   00E8H   A   
IPH0 . . . . . . . . . .  N NUMB   00B7H   A   
IPH1 . . . . . . . . . .  N NUMB   00F7H   A   
IPL0 . . . . . . . . . .  N NUMB   00B8H   A   
IPL1 . . . . . . . . . .  N NUMB   00F8H   A   
MSZ. . . . . . . . . . .  N NUMB   0022H   A   
PSW. . . . . . . . . . .  D ADDR   00D0H   A   
S0 . . . . . . . . . . .  N NUMB   0018H   A   
S1 . . . . . . . . . . .  N NUMB   0019H   A   
S2 . . . . . . . . . . .  N NUMB   001AH   A   
S3 . . . . . . . . . . .  N NUMB   001BH   A   
S4 . . . . . . . . . . .  N NUMB   001CH   A   
S5 . . . . . . . . . . .  N NUMB   001DH   A   
S6 . . . . . . . . . . .  N NUMB   001EH   A   
S7 . . . . . . . . . . .  N NUMB   001FH   A   
SS . . . . . . . . . . .  N NUMB   0020H   A   
SSZ. . . . . . . . . . .  N NUMB   0021H   A   
__HIL_CHECK_BATT_VOLTAGE  C ADDR   0046H   R   SEG=HIL
__HIL_DISABLE_BATTERYLO.  C ADDR   0070H   R   SEG=HIL
__HIL_ENABLE_ADC . . . .  C ADDR   002BH   R   SEG=HIL
__HIL_ENABLE_ADCCOLLECT.  C ADDR   0042H   R   SEG=HIL
__HIL_INIT . . . . . . .  C ADDR   0000H   R   SEG=HIL
__HIL_SELECT_ADCCH . . .  C ADDR   0038H   R   SEG=HIL
__SSPOP. . . . . . . . .  C ADDR   -----       EXT
A51 MACRO ASSEMBLER  HILSTRAPPER                                                          10/10/2018 14:44:02 PAGE     7

__SSPUSH . . . . . . . .  C ADDR   -----       EXT


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
