A51 MACRO ASSEMBLER  BOOTLOADER                                                           10/14/2018 21:16:36 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\BootLoader.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE BootLoader.asm SET(SMALL) DEBUG PRINT(.\Listings\BootLoader.lst) OBJECT
                      (.\Objects\BootLoader.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; ------------- READS51 generated header -------------- 
                       2     ; module  : Y:\Development\8051\Bootstrapper\Bootstrapper\BootLoader.asm
                       3     ; created : 17:04:29, Saturday, August 25, 2018
                       4     ; ----------------------------------------------------- 
                       5     ;-- Matt Rienzo, BootLoader.asm 8/25/2018
                       6     
                       7     ;#include "./include/asm/Registers.inc"
                +1     8     ; Matt Rienzo, Registers.inc 8/25/2018
                +1     9     
                +1    10     ;-- Alias/enumeration of registers and banks
  0000          +1    11     a0      equ     0
  0001          +1    12     a1      equ     1
  0002          +1    13     a2      equ     2
  0003          +1    14     a3      equ     3
  0004          +1    15     a4      equ     4
  0005          +1    16     a5      equ     5
  0006          +1    17     a6      equ     6
  0007          +1    18     a7      equ     7
  0008          +1    19     b0      equ     8
  0009          +1    20     b1      equ     9
  000A          +1    21     b2      equ     10
  000B          +1    22     b3      equ     11
  000C          +1    23     b4      equ     12
  000D          +1    24     b5      equ     13
  000E          +1    25     b6      equ     14
  000F          +1    26     b7      equ     15
  0010          +1    27     c0      equ     16
  0011          +1    28     c1      equ     17
  0012          +1    29     c2      equ     18
  0013          +1    30     c3      equ     19
  0014          +1    31     c4      equ     20
  0015          +1    32     c5      equ     21
  0016          +1    33     c6      equ     22
  0017          +1    34     c7      equ     23
                +1    35     
                +1    36     ;-- SFRs
                +1    37     ;sp  equ 0x81
                +1    38     ;acc equ 0xe0
  00F0          +1    39     bcc equ 0xf0
                +1    40     ;psw equ 0xd0
                      41     
                      42     ;#include "./include/asm/ShortStack.inc"
                +1    43     ; Matt Rienzo, ShortStack.inc 8/25/2018
                +1    44     
                +1    45     ; The following registers I am reserving for short stack operations
  0018          +1    46     s0      equ     0x18
  0019          +1    47     s1      equ     0x19
  001A          +1    48     s2      equ     0x1a
  001B          +1    49     s3      equ 0x1b
  001C          +1    50     s4      equ     0x1c
  001D          +1    51     s5      equ     0x1d
  001E          +1    52     s6      equ     0x1e
  001F          +1    53     s7      equ     0x1f
                +1    54     
                +1    55     
                +1    56     ; SHORT STACK -- see the Short Stack section after the END instruction for an explanation
                +1    57     ;  of what this is
A51 MACRO ASSEMBLER  BOOTLOADER                                                           10/14/2018 21:16:36 PAGE     2

                +1    58     ; Short stack address "register" and short stack size "register"
  0020          +1    59     ss      equ     0x20    ; short stack 0 address
  0021          +1    60     ssz     equ 0x21        ; short stack size (index)
  0022          +1    61     msz     equ     0x22    ; short stack max size (to avoid overflow, but with stack wrapping/
                             overwrites)
                      62     
                      63     ;#include "./include/asm/MacroLang.inc"
                +1    64     ; Matt Rienzo, MacroLang.inc 8/25/2018
                +1    65     sspush          macro   x
                +1    66             push    x
                +1    67             lcall   __sspush
                +1    68     endm
                +1    69     
                +1    70     sspop           macro   x
                +1    71             lcall   __sspop
                +1    72             pop             x
                +1    73     endm
                +1    74     
                +1    75     sspushl         macro   N
                +1    76             mov             s0,             N
                +1    77             push    s0
                +1    78             lcall   __sspush
                +1    79     endm
                      80     
                      81     
                      82     
                      83     ;#define DEBUG
                      84     
                      85     ;-- Segment declaration
                      86     setup   segment code
                      87     boot    segment code
                      88     exit    segment code
                      89     memory  segment code
                      90     
                      91     
                      92     ;-- Segment definition
                      93         public  __sspush
                      94         public  __sspop
----                  95     rseg    memory
0000                  96             __sspush:  ; Takes a byte off the top of the stack and moves it to the short stack
                      97                     ; Increment our short stack index
                      98                     ; if([msz]-[ssz] == 0) [ssz] = 0;
                      99     
0000 E521            100             mov     a,      ssz
                     101     
                     102     
                                     
                                     
                             
0002 2401            106             add     a,      #0x01
0004 F521            107                     mov             ssz,    a
0006 7400            108                     mov             a,              #0x00
0008 2521            109                     add             a,              ssz
                     110                     
                     111     
                                     
                                     
                             
                     115     
000A 9522            116             subb    a,      msz
                     117     
000C B40003          118             cjne    a,      #0x00,  __sspush_continue
                     119                     
                     120                     ; Reset our ssz, wrapping our stack
000F 752100          121                     mov             ssz,    #0x00
                     122             
A51 MACRO ASSEMBLER  BOOTLOADER                                                           10/14/2018 21:16:36 PAGE     3

0012                 123             __sspush_continue:
                     124                     ; Set our offset
                     125                     ; &s7 = ss+[ssz]
                     126     
0012 7420            127             mov     a,      #ss
                     128     
                     129     
                                     
                                     
                             
0014 2521            133             add     a,      ssz
                     134     
                                     
                             
                     137             ; Preserve our callback/ret address
0016 D01F            138             pop     s7
0018 D01E            139             pop     s6
                     140             
                     141             ; Argument
001A D01D            142             pop     s5
001C F8              143             mov     r0,     a
001D A61D            144             mov     @r0,    s5
                     145     
001F C01E            146             push    s6
0021 C01F            147             push    s7
0023 22              148                     ret
                     149                     
0024                 150             __sspop:   ; Takes a byte off the top of the short stack and moves it to the stack
                     151     
0024 7420            152             mov     a,      #ss
                     153     
                     154     
                                             
                                             
                                     
                             
0026 2521            159             add     a,      ssz
                     160     
                     161             ; Preserve callback/ret address
0028 D019            162             pop     s1
002A D01A            163             pop     s2
                     164     
002C F8              165             mov     r0,     a
002D 861B            166             mov     s3,     @r0
002F C01B            167             push    s3 ; Return byte
                     168                     
                     169                     ; Check if our offset is 0
                     170     
0031 E521            171             mov     a,      ssz
0033 B40002          172             cjne    a,      #0x00,  __sspop_continue
0036 2401            173             add     a,      #0x01
                     174     
                                     
                             
                     177                     
0038                 178             __sspop_continue:
0038 9401            179             subb    a,      #0x01
                     180     
                                     
                             
                     183                     
                     184             ; Callback/ret address
003A C01A            185             push    s2
003C C019            186             push    s1
003E 22              187                     ret
                     188     
A51 MACRO ASSEMBLER  BOOTLOADER                                                           10/14/2018 21:16:36 PAGE     4

                     189     
                     190     
                     191         public  __setup             
----                 192     rseg    setup
0000                 193             __setup:
                     194                     ;---SHORT STACK
0000 752023          195                     mov             ss,             #0x23
0003 752100          196                     mov             ssz,    #0x00
0006 75220A          197                     mov             msz,    #0x0A   ; 10 bytes longs
                     198                     ; The last slot in the short stack will be #([ss]+[msz])
                     199                     
                     200                     ;---STACK
                     201                     ; Set SP to 0x30
0009 758130          202                     mov             sp,             #0x30
                     203                     
                     204                     ; enter our program
000C 020000   F      205                     ljmp    __entry
                     206             
                     207             
                     208                     
----                 209     rseg    boot
                     210             extrn           code    (__HIL_init)
                     211             extrn           code    (__HAL_init)
                     212             extrn           code    (kmain)
0000                 213             __entry:
                     214             ; Do three things:      (1) tell the Hardware Interaction Layer to initialize
                     215             ;                                       (2) tell the Hardware Abstration Layer to i
                             nitialize
                     216             ;                                       (3) jump into the main program
0000 1100     F      217                     acall   __HIL_init      ; pushes return code onto ss
                     218                     sspop   acc
0007 B4001A          221                     cjne    a,              #0x00,  __entry_HIL_error
                     222                     
000A 120000   F      223                     lcall   __HAL_init
                     224                     sspop   acc
0012 B40012          227                     cjne    a,              #0x00,  __entry_HAL_error
                     228                     
0015 74E4            229             mov     a,      #0xe4
0017 1100     F      230                     acall   kmain
                     231                     sspop   acc
001E B40009          234                     cjne    a,              #0x00,  __entry_main_error
                     235                     
0021 020000   F      236                     ljmp    __shutdown
                     237                     
0024                 238             __entry_HIL_error:      ; Turn on ERR LED
0024 020000   F      239                     ljmp    __shutdown
0027                 240             __entry_HAL_error:      ; Turn on ERR LED and batt_too_low square
0027 020000   F      241                     ljmp    __shutdown
002A                 242             __entry_main_error:     ; Turn on ERR LED and white square
002A 020000   F      243                     ljmp    __shutdown
                     244                     
                     245                     
----                 246     rseg    exit
0000                 247             __shutdown:
                     248                     ; Endless looooooop
0000 0100     F      249                     ajmp    __shutdown
                     250     end
A51 MACRO ASSEMBLER  BOOTLOADER                                                           10/14/2018 21:16:36 PAGE     5

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

A0 . . . . . . . .  N NUMB   0000H   A   
A1 . . . . . . . .  N NUMB   0001H   A   
A2 . . . . . . . .  N NUMB   0002H   A   
A3 . . . . . . . .  N NUMB   0003H   A   
A4 . . . . . . . .  N NUMB   0004H   A   
A5 . . . . . . . .  N NUMB   0005H   A   
A6 . . . . . . . .  N NUMB   0006H   A   
A7 . . . . . . . .  N NUMB   0007H   A   
ACC. . . . . . . .  D ADDR   00E0H   A   
B0 . . . . . . . .  N NUMB   0008H   A   
B1 . . . . . . . .  N NUMB   0009H   A   
B2 . . . . . . . .  N NUMB   000AH   A   
B3 . . . . . . . .  N NUMB   000BH   A   
B4 . . . . . . . .  N NUMB   000CH   A   
B5 . . . . . . . .  N NUMB   000DH   A   
B6 . . . . . . . .  N NUMB   000EH   A   
B7 . . . . . . . .  N NUMB   000FH   A   
BCC. . . . . . . .  N NUMB   00F0H   A   
BOOT . . . . . . .  C SEG    002DH       REL=UNIT
C0 . . . . . . . .  N NUMB   0010H   A   
C1 . . . . . . . .  N NUMB   0011H   A   
C2 . . . . . . . .  N NUMB   0012H   A   
C3 . . . . . . . .  N NUMB   0013H   A   
C4 . . . . . . . .  N NUMB   0014H   A   
C5 . . . . . . . .  N NUMB   0015H   A   
C6 . . . . . . . .  N NUMB   0016H   A   
C7 . . . . . . . .  N NUMB   0017H   A   
EXIT . . . . . . .  C SEG    0002H       REL=UNIT
KMAIN. . . . . . .  C ADDR   -----       EXT
MEMORY . . . . . .  C SEG    003FH       REL=UNIT
MSZ. . . . . . . .  N NUMB   0022H   A   
S0 . . . . . . . .  N NUMB   0018H   A   
S1 . . . . . . . .  N NUMB   0019H   A   
S2 . . . . . . . .  N NUMB   001AH   A   
S3 . . . . . . . .  N NUMB   001BH   A   
S4 . . . . . . . .  N NUMB   001CH   A   
S5 . . . . . . . .  N NUMB   001DH   A   
S6 . . . . . . . .  N NUMB   001EH   A   
S7 . . . . . . . .  N NUMB   001FH   A   
SETUP. . . . . . .  C SEG    000FH       REL=UNIT
SP . . . . . . . .  D ADDR   0081H   A   
SS . . . . . . . .  N NUMB   0020H   A   
SSZ. . . . . . . .  N NUMB   0021H   A   
__ENTRY. . . . . .  C ADDR   0000H   R   SEG=BOOT
__ENTRY_HAL_ERROR.  C ADDR   0027H   R   SEG=BOOT
__ENTRY_HIL_ERROR.  C ADDR   0024H   R   SEG=BOOT
__ENTRY_MAIN_ERROR  C ADDR   002AH   R   SEG=BOOT
__HAL_INIT . . . .  C ADDR   -----       EXT
__HIL_INIT . . . .  C ADDR   -----       EXT
__SETUP. . . . . .  C ADDR   0000H   R   SEG=SETUP
__SHUTDOWN . . . .  C ADDR   0000H   R   SEG=EXIT
__SSPOP. . . . . .  C ADDR   0024H   R   SEG=MEMORY
__SSPOP_CONTINUE .  C ADDR   0038H   R   SEG=MEMORY
__SSPUSH . . . . .  C ADDR   0000H   R   SEG=MEMORY
__SSPUSH_CONTINUE.  C ADDR   0012H   R   SEG=MEMORY


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
A51 MACRO ASSEMBLER  BOOTLOADER                                                           10/14/2018 21:16:36 PAGE     6

