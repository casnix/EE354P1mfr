C51 COMPILER V9.59.0.0   KTHREADS                                                          10/14/2018 21:16:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE KTHREADS
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE kthreads.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -kthreads.lst) TABS(2) OBJECT(.\Objects\kthreads.obj)

line level    source

   1          // Matt Rienzo, kthreads.c 9/28/2018
   2          // Last modified 10/14/2018
   3          
   4          #pragma SRC
   5          
   6          #include "./include/c/Registers.h"
   7          #include "./include/c/Types.h"
   8          #include "./include/c/ThreadStates.h"
   9          
  10          //
  11          // External references
  12          
  13          //
  14          //
  15          
  16          //
  17          // Function prototypes
  18          void kthreads_isr(void);
  19          byte enable_threads(void);
  20          void kthreads_compile_init(void);
  21          byte decodeThreadPriority(byte*);
  22          //
  23          //
  24          
  25          //
  26          // Global variables -- fit in the last 8 bytes of ERAM (2 + 1 + 1 + ? ) = 
  27          unsigned int xdata threadmap _at_ (204*10); //TODO: Store this in ERAM, two bytes at 204*10
  28          byte xdata intCount _at_ (204*10+2); //TODO: Store this in ERAM, one byte at 204*10+2
  29          byte xdata topThread _at_ (204*10+3); //TODO: Store this in ERAM, one byte at 204*10+3
  30          //
  31          //
  32          
  33          byte enable_threads(void){
  34   1        // return false unless all set up conditions are true
  35   1        return FALSE;
  36   1        
  37   1        // If we pass our test, flip BTE on and return true
  38   1        *bte = TRUE;
  39   1        return TRUE;
  40   1      }
  41          
  42          void kthreads_isr(void) interrupt 5 using 3 { // Will use TIMER2
  43   1        byte desiredThreadWaitLo;
  44   1        byte desiredThreadWaitHi;
  45   1        byte tsegFromERAM;
  46   1        byte threadInQeue = NULLBYTE;
  47   1        
  48   1        // 1) Check if threading is even enabled
  49   1        if(*bte == FALSE) // Threads aren't enabled, so we shouldn't do anything
  50   1          return; 
  51   1        
  52   1        // 2) Check if our current thread is done with it's work
  53   1        if(*tseg == TR_FINISH){
  54   2          // unmalloc the space in TRID->malloc in ERAM, freeing the space in EEPROM
C51 COMPILER V9.59.0.0   KTHREADS                                                          10/14/2018 21:16:36 PAGE 2   

  55   2          // update threadmap string
  56   2        }
  57   1        
  58   1        // 3) Check for thread signals
  59   1        if((*bts == TRUE) && (*ntsd == *trid)){ // Is it the current thread?
  60   2          // Read signal, determine what to do with it
  61   2        }
  62   1        
  63   1        // 4) Check for priority change
  64   1        if(*tsup == TRUE){
  65   2          // Reset TSUP
  66   2          *tsup = FALSE;
  67   2          // The thread sets TSEG on it's own, so we'll compare against interrupt count in step five
  68   2        }
  69   1        
  70   1        // 5) Check interrupt counter against thread priority
  71   1        // These are more magic numbers:
  72   1        //    Hold priority is the highest, and gets all the thread power until a priority change
  73   1        //    High priority gives a thread 15 timer counts
  74   1        //    Normal priority gives a thread 10 timer counts
  75   1        //    Low priority gives a thread 5 timer counts
  76   1        //    Wait priority makes the thread wait until the thread number in TRSV finishes
  77   1        //    WaitHi priority makes the thread wait until the threads in the MSB of threadmap are finished, as defi
             -ned by TRSV
  78   1        intCount = decodeThreadPriority(tseg);
  79   1        if((*tseg == TSEG_HOLD)){// Do nothing and just exit
  80   2          return;
  81   2        }else if((*tseg == TSEG_HIGH) && (*nic < intCount)){// We aren't quite at 15 ticks
  82   2          *nic = (*nic) + 0x01;
  83   2          return;
  84   2        }else if((*tseg == TSEG_NORMAL) && (*nic < intCount)){// We aren't quite at 10 ticks
  85   2          *nic = (*nic) + 0x01;
  86   2          return;
  87   2        }else if((*tseg == TSEG_LOW) && (*nic < intCount)){// We aren't quite at 5 ticks
  88   2          *nic = (*nic) + 0x01;
  89   2          return;
  90   2        }
  91   1        
  92   1        // 6) If we passed step five, we should switch to the next thread
  93   1        desiredThreadWaitLo = ((unsigned char)threadmap) & *trsv;
  94   1        desiredThreadWaitHi = ((unsigned char)(threadmap >> 8)) & *trsv;
  95   1        
  96   1        // The thread IN qeue is the thread after the thread AT qeue
  97   1        if(*trid == topThread){// We're at the top of our qeue, so let's wrap around (like a thread stack.  cool,
             - huh?)
  98   2          threadInQeue = NULLBYTE;
  99   2        }else{
 100   2          threadInQeue = *trid + 0x01;
 101   2        }
 102   1        
 103   1        // Make sure that the current thread ID is not the next one too (in case of one thread, or other threads 
             -waiting)
 104   1        if(threadInQeue == *trid){
 105   2          // Do nothing but reset NIC.  It's possible that this thread will spawn another at some point, or a wait
             -ing thread will activate
 106   2          *nic = NULLBYTE;
 107   2          return;
 108   2        }
 109   1        
 110   1        // Grab TSEG from the next thread's state memory in ERAM
 111   1        if((tsegFromERAM == TSEG_WAIT) && (desiredThreadWaitLo != *trsv)){// We have not reached our desired stat
             -e
C51 COMPILER V9.59.0.0   KTHREADS                                                          10/14/2018 21:16:36 PAGE 3   

 112   2          // Skip this thread, and go to the next
 113   2          threadInQeue++;
 114   2        }else if((tsegFromERAM == TSEG_WAITHI) && (desiredThreadWaitHi != *trsv)){// We have not reached our desi
             -red state
 115   2          // Skip this thread, and go to the next
 116   2          threadInQeue++;
 117   2        }
 118   1        
 119   1        // Pop the return address off the stack
 120   1      #pragma ASM
 121   1        pop #0x10 ; -- ra0
 122   1        pop #0x11 ; -- ra1
 123   1      #pragma ENDASM
 124   1        
 125   1        //1-- Copy the current stack into the current thread's memory page.
 126   1        //2-- Copy the current short stack into the current thread's memory page
 127   1        //3-- Move the return address into the current thread's program counter in memory page
 128   1        //4-- Move the current thread's register bank 1 into the current thread's memory page
 129   1        //5-- Move the current thread's thread descriptors into the current thread's memory page
 130   1        //6-- Leave the current thread's malloc map alone -- it's already in the current thread's memory page
 131   1        
 132   1        //1-- Move the next thread's thread descriptors from page to the current thread's descriptors
 133   1        //2-- Move the next thread's register bank 1 from page into the current thread's register bank 1
 134   1        //3-- Move the next thread's program counter from page into RA0 and RA1
 135   1        //4-- Move the next thread's short stack from page into the current thread's short stack
 136   1        //5-- Move the next thread's stack from page into the current thread's stack
 137   1        //6-- Push RA0 and RA1 onto the stack
 138   1      #pragma ASM
 139   1        push #0x11 ; -- ra1
 140   1        push #0x10 ; -- ra0
 141   1      #pragma ENDASM
 142   1      }
 143          
 144          byte decodeThreadPriority(byte *thread_priority){
 145   1        if(*thread_priority == TSEG_HIGH)
 146   1          return 0x0F;
 147   1        else if(*thread_priority == TSEG_NORMAL)
 148   1          return 0x0A;
 149   1        else if(*thread_priority == TSEG_LOW)
 150   1          return 0x05;
 151   1        
 152   1        return 0x00;
 153   1      }
 154          
 155          ///--- Keep at bottom of file.
 156          void kthreads_compile_init(void){ // Literally exists to satiate BL51's ruthless desire to make me unhappy
 157   1        // Literally NO code path will lead to execution of this, but BL51 freaks if this isn't here.
 158   1        
 159   1        enable_threads();
 160   1      }
*** WARNING C294 IN LINE 38 OF kthreads.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    348    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   KTHREADS                                                          10/14/2018 21:16:36 PAGE 4   


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
