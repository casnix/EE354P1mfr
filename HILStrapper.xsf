; Matt Rienzo, HILStrapper.inc 8/25/2018

;"#../include/asm/Registers.inc"
; Matt Rienzo, Registers.inc 8/25/2018

;-- Alias/enumeration of registers and banks
a0	equ	0
a1	equ	1
a2	equ	2
a3	equ	3
a4	equ	4
a5	equ	5
a6	equ	6
a7	equ	7
b0	equ	8
b1	equ	9
b2	equ	10
b3	equ	11
b4	equ	12
b5	equ	13
b6	equ	14
b7	equ	15
c0	equ	16
c1	equ	17
c2	equ	18
c3	equ	19
c4	equ	20
c5	equ	21
c6	equ	22
c7	equ	23

;-- SFRs
sp  equ 0x81
acc equ 0xe0
bcc equ 0xf0
psw equ 0xd0
;"#../include/asm/ShortStack.inc"
; Matt Rienzo, ShortStack.inc 8/25/2018

; The following registers I am reserving for short stack operations
s0	equ	0x18
s1	equ	0x19
s2	equ	0x1a
s3	equ 0x1b
s4	equ	0x1c
s5	equ	0x1d
s6	equ	0x1e
s7	equ	0x1f


; SHORT STACK -- see the Short Stack section after the END instruction for an explanation
;  of what this is
; Short stack address "register" and short stack size "register"
ss	equ	0x20	; short stack 0 address
ssz	equ 0x21	; short stack size (index)
msz	equ	0x22	; short stack max size (to avoid overflow, but with stack wrapping/overwrites)
;"#ADC.inc"
; ------------- READS51 generated header -------------- 
; module  : Y:\Development\8051\Bootstrapper\Bootstrapper\ADC.inc
; created : 11:09:44, Monday, August 27, 2018
; ----------------------------------------------------- 

; Matt Rienzo, ADC.inc 8/27/2018

; Direct memory addressing
adcon       equ 0xf3
adcf        equ 0xf6
adclk       equ 0xf2
addh        equ 0xf5
addl        equ 0xf4
;"#InterruptController.inc"
; ------------- READS51 generated header -------------- 
; module  : Y:\Development\8051\Bootstrapper\Bootstrapper\InterruptController.inc
; created : 11:26:26, Monday, August 27, 2018
; ----------------------------------------------------- 

; Matt Rienzo, InterruptController.inc

ien0    equ 0xa8
ien1    equ 0xe8
ipl0    equ 0xb8
iph0    equ 0xb7
ipl1    equ 0xf8
iph1    equ 0xf7



;#define OPTIMIZE

HIL		segment	code
	
public	__HIL_init
public	main
rseg	HIL
    extern  code    __sspop
    extern  code    __sspush
	__HIL_init:
; 1) Turn on ADC.
        mov     adcf,       #0x01
        mov     adcon,      #0x20
        mov     adclk,      #0x00
        mov     c7,         adcf
        mov     c6,         adcon
        mov     c5,         adclk
        
; Disable interrupts for while we check devices on ADC
        anl ien0,#0x7f
; 2) Check battery voltage.  Too low? Turn on red square and battery low LEDs.
; battery voltage/division will be routed to ADC channel 0
        anl     adcon,      #0xf8
        orl     adcon,      #0x00
        orl     adcon,      #0x20

; Start the ADC collection
        orl     adcon,      #0x08
        push    acc
    hsWdbADCON:
        mov     a,          adcon
        anl     a,          0x10
        cjne    a,          0x10,   hsWdbADCON

; Voltage check
; will change
        push    bcc
        mov     a,          #0xff
        mov     a,          #0x00
        mov     a,          #0xff
    dbgloop:    
        clr     c
        mov     a,          #0x0f
        subb    a,          #0x0f
; mov     a,          c


    dbgdo:
        sjmp    dbgloop

        
; 3) Turn on accelerometer
; 4) Switch interrupts?
; 5) Return success
; Handler for turning on LEDs
; Handler for LED array
; Handler for power touch button
; Handler for battery power measuring
; Handler for accelerometer
; Handler for vibration motor
        mov s0,#0x00 push s0 lcall __sspush
  		ret
		
	main:
; Order of operation:
		ret
		
		
end
