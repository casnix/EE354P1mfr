; Matt Rienzo, HALStrapper.asm 8/27/2018

;"#../include/asm/Registers.inc"
; Matt Rienzo, Registers.inc 8/25/2018

;-- Alias/enumeration of registers and banks
a0	equ	0
a1	equ	1
a2	equ	2
a3	equ	3
a4	equ	4
a5	equ	5
a6	equ	6
a7	equ	7
b0	equ	8
b1	equ	9
b2	equ	10
b3	equ	11
b4	equ	12
b5	equ	13
b6	equ	14
b7	equ	15
c0	equ	16
c1	equ	17
c2	equ	18
c3	equ	19
c4	equ	20
c5	equ	21
c6	equ	22
c7	equ	23

;-- SFRs
sp  equ 0x81
acc equ 0xe0
bcc equ 0xf0
psw equ 0xd0
;"#../include/asm/ShortStack.inc"
; Matt Rienzo, ShortStack.inc 8/25/2018

; The following registers I am reserving for short stack operations
s0	equ	0x18
s1	equ	0x19
s2	equ	0x1a
s3	equ 0x1b
s4	equ	0x1c
s5	equ	0x1d
s6	equ	0x1e
s7	equ	0x1f


; SHORT STACK -- see the Short Stack section after the END instruction for an explanation
;  of what this is
; Short stack address "register" and short stack size "register"
ss	equ	0x20	; short stack 0 address
ssz	equ 0x21	; short stack size (index)
msz	equ	0x22	; short stack max size (to avoid overflow, but with stack wrapping/overwrites)


;#define OPTIMIZE

HAL     segment     code

    public  __HAL_init
rseg    HAL
    extern  code    __sspush
    extern  code    __sspop
    __HAL_init:
; 1) Setup array in memory for the 128 LED array.
; 2) Setup handlers in ISR for the power/reset button
; 3) Setup callback function for main loop/accelerometer
; 4) return success
        
        mov s0,#0x00 push s0 lcall __sspush
        ret
end
